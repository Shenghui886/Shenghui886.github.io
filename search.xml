<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/21/hello-world/"/>
      <url>/2025/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lua基本语法</title>
      <link href="/2025/04/21/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/04/21/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>单行注释以两个字符–开头，其后的内容会被注释</p></li><li><p>多行注释以–[[开始，以]]结束（注释不支持嵌套）</p>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>Lua 标识符用于定义一个变量，函数获取其他用户定义的项。标识符以一个字母 A 到 Z 或 a 到 z 或下划线 <strong>_</strong> 开头后加上 0 个或多个字母，下划线，数字（0 到 9）。</p><p>最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这样的。</p><p>Lua 不允许使用特殊字符如 <strong>@</strong>, <strong>$</strong>, 和 <strong>%</strong> 来定义标识符。 Lua 是一个区分大小写的编程语言。因此在 Lua 中 Runoob 与 runoob 是两个不同的标识符。</p><p>以下列出了一些正确的标识符：</p><blockquote><p>mohd         zara      abc     move_name    a_123<br>myname50     _temp     j       a23b9        retVal</p></blockquote><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>在 Lua 中，<strong>关键词</strong>（也称为保留字）是语言中具有特殊意义的单词，不能用作变量名、函数名或其他标识符。Lua 的关键词如下：</p><h3 id="Lua-的关键词列表"><a href="#Lua-的关键词列表" class="headerlink" title="Lua 的关键词列表"></a>Lua 的关键词列表</h3><p>以下是 Lua 中的所有关键词：</p><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td><code>and</code></td><td>逻辑与操作符</td></tr><tr><td><code>break</code></td><td>用于跳出循环</td></tr><tr><td><code>do</code></td><td>用于开始一个代码块</td></tr><tr><td><code>else</code></td><td>用于 <code>if</code> 语句的否定分支</td></tr><tr><td><code>elseif</code></td><td>用于 <code>if</code> 语句的多个条件分支</td></tr><tr><td><code>end</code></td><td>用于结束代码块（如 <code>if</code>、<code>for</code>、<code>while</code>、<code>function</code> 等）</td></tr><tr><td><code>false</code></td><td>布尔值假</td></tr><tr><td><code>for</code></td><td>用于循环结构</td></tr><tr><td><code>function</code></td><td>用于定义函数</td></tr><tr><td><code>goto</code></td><td>用于跳转到指定标签（Lua 5.2 及以上版本支持）</td></tr><tr><td><code>if</code></td><td>用于条件判断</td></tr><tr><td><code>in</code></td><td>用于 <code>for</code> 循环中的迭代</td></tr><tr><td><code>local</code></td><td>用于声明局部变量</td></tr><tr><td><code>nil</code></td><td>表示空值或无效值</td></tr><tr><td><code>not</code></td><td>逻辑非操作符</td></tr><tr><td><code>or</code></td><td>逻辑或操作符</td></tr><tr><td><code>repeat</code></td><td>用于循环结构，与 <code>until</code> 配合使用</td></tr><tr><td><code>return</code></td><td>用于从函数中返回值</td></tr><tr><td><code>then</code></td><td>用于 <code>if</code> 语句的条件分支</td></tr><tr><td><code>true</code></td><td>布尔值真</td></tr><tr><td><code>until</code></td><td>用于 <code>repeat</code> 循环的条件判断</td></tr><tr><td><code>while</code></td><td>用于循环结构</td></tr></tbody></table><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在 Lua 中，变量的生命周期取决于其作用域。Lua 中的变量主要有两种作用域：全局作用域和局部作用域。</p><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1. 全局变量"></a>1. 全局变量</h3><ul><li><strong>生命周期</strong>: 全局变量的生命周期从它被创建开始，直到程序结束。</li><li><strong>作用域</strong>: 全局变量在整个程序中都可以访问。</li><li><strong>声明</strong>: 默认情况下，变量是全局的，除非显式声明为局部变量。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myGlobalVar = <span class="number">10</span>  <span class="comment">-- 这是一个全局变量</span></span><br><span class="line"><span class="built_in">print</span>(myGlobalVar)  <span class="comment">-- 输出: 10</span></span><br></pre></td></tr></table></figure><h3 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2. 局部变量"></a>2. 局部变量</h3><ul><li><strong>生命周期</strong>: 局部变量的生命周期从它被声明开始，到其所在的作用域结束。</li><li><strong>作用域</strong>: 局部变量只在声明它的块（如函数、循环、条件语句等）内有效。</li><li><strong>声明</strong>: 使用 <code>local</code> 关键字声明局部变量。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> myLocalVar = <span class="number">20</span>  <span class="comment">-- 这是一个局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(myLocalVar)  <span class="comment">-- 输出: 20</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">myFunction()</span><br><span class="line"><span class="built_in">print</span>(myLocalVar)  <span class="comment">-- 输出: nil，因为 myLocalVar 在函数外不可见</span></span><br></pre></td></tr></table></figure><h3 id="3-变量的作用域规则"><a href="#3-变量的作用域规则" class="headerlink" title="3. 变量的作用域规则"></a>3. 变量的作用域规则</h3><ul><li><strong>块作用域</strong>: Lua 中的局部变量遵循块作用域规则，即变量只在声明它的块内有效。</li><li><strong>嵌套作用域</strong>: 在嵌套的作用域中，内部作用域可以访问外部作用域的变量，但外部作用域不能访问内部作用域的变量。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> outerVar = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> outerVar &gt; <span class="number">20</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> innerVar = <span class="number">40</span>  <span class="comment">-- 这是一个局部变量，只在 if 块内有效</span></span><br><span class="line">    <span class="built_in">print</span>(innerVar)  <span class="comment">-- 输出: 40</span></span><br><span class="line">    <span class="built_in">print</span>(outerVar)  <span class="comment">-- 输出: 30</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(innerVar)  <span class="comment">-- 输出: nil，因为 innerVar 在 if 块外不可见</span></span><br></pre></td></tr></table></figure><h3 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4. 垃圾回收"></a>4. 垃圾回收</h3><ul><li>Lua 使用自动垃圾回收机制来管理内存。当一个变量不再被引用时，Lua 的垃圾回收器会自动释放其占用的内存。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>全局变量</strong>: 生命周期从创建到程序结束，作用域为整个程序。</li><li><strong>局部变量</strong>: 生命周期从声明到作用域结束，作用域为声明它的块内。</li><li><strong>垃圾回收</strong>: Lua 自动管理内存，释放不再使用的变量。</li></ul><p>理解 Lua 变量的生命周期和作用域有助于编写更清晰、更高效的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foo </tag>
            
            <tag> Bar </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
